!function(t){"use strict";class e extends t.Mesh{constructor(){super(e.Geometry,new t.MeshBasicMaterial({opacity:0,transparent:!0})),this.type="Lensflare",this.frustumCulled=!1,this.renderOrder=1/0;const i=new t.Vector3,r=new t.Vector3,s=new t.FramebufferTexture(16,16,t.RGBAFormat),o=new t.FramebufferTexture(16,16,t.RGBAFormat),l=e.Geometry,a=new t.RawShaderMaterial({uniforms:{scale:{value:null},screenPosition:{value:null}},vertexShader:"\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}",fragmentShader:"\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n\n\t\t\t\t}",depthTest:!0,depthWrite:!1,transparent:!1}),c=new t.RawShaderMaterial({uniforms:{map:{value:s},scale:{value:null},screenPosition:{value:null}},vertexShader:"\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\t\t\t\tattribute vec2 uv;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUV = uv;\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}",fragmentShader:"\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = texture2D( map, vUV );\n\n\t\t\t\t}",depthTest:!1,depthWrite:!1,transparent:!1}),u=new t.Mesh(l,a),v=[],p=n.Shader,f=new t.RawShaderMaterial({uniforms:{map:{value:null},occlusionMap:{value:o},color:{value:new t.Color(16777215)},scale:{value:new t.Vector2},screenPosition:{value:new t.Vector3}},vertexShader:p.vertexShader,fragmentShader:p.fragmentShader,blending:t.AdditiveBlending,transparent:!0,depthWrite:!1}),h=new t.Mesh(l,f);this.addElement=function(t){v.push(t)};const m=new t.Vector2,d=new t.Vector2,x=new t.Box2,y=new t.Vector4;this.onBeforeRender=function(t,e,n){t.getCurrentViewport(y);const p=y.w/y.z,g=y.z/2,b=y.w/2;let w=16/y.w;if(m.set(w*p,w),x.min.set(y.x,y.y),x.max.set(y.x+(y.z-16),y.y+(y.w-16)),r.setFromMatrixPosition(this.matrixWorld),r.applyMatrix4(n.matrixWorldInverse),!(r.z>0)&&(i.copy(r).applyMatrix4(n.projectionMatrix),d.x=y.x+i.x*g+g-8,d.y=y.y+i.y*b+b-8,x.containsPoint(d))){t.copyFramebufferToTexture(d,s);let e=a.uniforms;e.scale.value=m,e.screenPosition.value=i,t.renderBufferDirect(n,null,l,a,u,null),t.copyFramebufferToTexture(d,o),e=c.uniforms,e.scale.value=m,e.screenPosition.value=i,t.renderBufferDirect(n,null,l,c,u,null);const r=2*-i.x,p=2*-i.y;for(let e=0,s=v.length;e<s;e++){const s=v[e],o=f.uniforms;o.color.value.copy(s.color),o.map.value=s.texture,o.screenPosition.value.x=i.x+r*s.distance,o.screenPosition.value.y=i.y+p*s.distance,w=s.size/y.w;const a=y.w/y.z;o.scale.value.set(w*a,w),f.uniformsNeedUpdate=!0,t.renderBufferDirect(n,null,l,f,h,null)}}},this.dispose=function(){a.dispose(),c.dispose(),f.dispose(),s.dispose(),o.dispose();for(let t=0,e=v.length;t<e;t++)v[t].texture.dispose()}}}e.prototype.isLensflare=!0;class n{constructor(e,n=1,i=0,r=new t.Color(16777215)){this.texture=e,this.size=n,this.distance=i,this.color=r}}n.Shader={uniforms:{map:{value:null},occlusionMap:{value:null},color:{value:null},scale:{value:null},screenPosition:{value:null}},vertexShader:"\n\n\t\tprecision highp float;\n\n\t\tuniform vec3 screenPosition;\n\t\tuniform vec2 scale;\n\n\t\tuniform sampler2D occlusionMap;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvUV = uv;\n\n\t\t\tvec2 pos = position.xy;\n\n\t\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\n\t\t\tvVisibility =        visibility.r / 9.0;\n\t\t\tvVisibility *= 1.0 - visibility.g / 9.0;\n\t\t\tvVisibility *=       visibility.b / 9.0;\n\n\t\t\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tprecision highp float;\n\n\t\tuniform sampler2D map;\n\t\tuniform vec3 color;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texture = texture2D( map, vUV );\n\t\t\ttexture.a *= vVisibility;\n\t\t\tgl_FragColor = texture;\n\t\t\tgl_FragColor.rgb *= color;\n\n\t\t}"},e.Geometry=function(){const e=new t.BufferGeometry,n=new Float32Array([-1,-1,0,0,0,1,-1,0,1,0,1,1,0,1,1,-1,1,0,0,1]),i=new t.InterleavedBuffer(n,5);return e.setIndex([0,1,2,0,2,3]),e.setAttribute("position",new t.InterleavedBufferAttribute(i,3,0,!1)),e.setAttribute("uv",new t.InterleavedBufferAttribute(i,2,3,!1)),e}(),AFRAME.registerComponent("lens-flare",{schema:{},init(){this.lensFlare=new e,this.el.setObject3D("lensflare",this.lensFlare)},remove(){this.el.removeObject3D("lensflare",this.lensFlare)}}),AFRAME.registerComponent("lens-flare-element",{schema:{texture:{description:"Texture of the lensflare",default:"https://threejs.org/examples/textures/lensflare/lensflare0.png",type:"map"},size:{description:"Size in pixels of the lensflare",type:"map"},distance:{description:"Distance from the light 0-1",default:0},color:{description:"Override color of the lensflare",type:"color",default:"white"}},init(){this.lensFlare=new n;(this.el.components["lens-flare"]||this.el.parentNode.components["lens-flare"]).lensFlare.addElement(this.lensFlare)},update(t={}){for(const e of["texture","size","distance","color"]){const n=this.data[e];t[e]!==n&&("texture"===e?this.el.sceneEl.systems.material.loadTexture(n,{src:n},(function(t){this.lensFlare.texture=t,AFRAME.utils.material.handleTextureEvents(self.el,t)})):"color"===e?this.lensFlare.color.set(n):this.lensFlare[e]=n)}},remove(){this.el.removeObject3D("lensflare")}})}(THREE);
//# sourceMappingURL=aframe-lensflare.min.js.map
