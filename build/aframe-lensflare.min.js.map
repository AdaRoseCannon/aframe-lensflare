{"version":3,"file":"aframe-lensflare.min.js","sources":["../node_modules/three/examples/jsm/objects/Lensflare.js","../src/aframe-lensflare.js"],"sourcesContent":["import {\n\tAdditiveBlending,\n\tBox2,\n\tBufferGeometry,\n\tColor,\n\tFramebufferTexture,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tMesh,\n\tMeshBasicMaterial,\n\tRawShaderMaterial,\n\tVector2,\n\tVector3,\n\tVector4,\n\tRGBAFormat\n} from 'three';\n\nclass Lensflare extends Mesh {\n\n\tconstructor() {\n\n\t\tsuper( Lensflare.Geometry, new MeshBasicMaterial( { opacity: 0, transparent: true } ) );\n\n\t\tthis.type = 'Lensflare';\n\t\tthis.frustumCulled = false;\n\t\tthis.renderOrder = Infinity;\n\n\t\t//\n\n\t\tconst positionScreen = new Vector3();\n\t\tconst positionView = new Vector3();\n\n\t\t// textures\n\n\t\tconst tempMap = new FramebufferTexture( 16, 16, RGBAFormat );\n\t\tconst occlusionMap = new FramebufferTexture( 16, 16, RGBAFormat );\n\n\t\t// material\n\n\t\tconst geometry = Lensflare.Geometry;\n\n\t\tconst material1a = new RawShaderMaterial( {\n\t\t\tuniforms: {\n\t\t\t\t'scale': { value: null },\n\t\t\t\t'screenPosition': { value: null }\n\t\t\t},\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n\n\t\t\t\t}`,\n\t\t\tdepthTest: true,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: false\n\t\t} );\n\n\t\tconst material1b = new RawShaderMaterial( {\n\t\t\tuniforms: {\n\t\t\t\t'map': { value: tempMap },\n\t\t\t\t'scale': { value: null },\n\t\t\t\t'screenPosition': { value: null }\n\t\t\t},\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\t\t\t\tattribute vec2 uv;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUV = uv;\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = texture2D( map, vUV );\n\n\t\t\t\t}`,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: false\n\t\t} );\n\n\t\t// the following object is used for occlusionMap generation\n\n\t\tconst mesh1 = new Mesh( geometry, material1a );\n\n\t\t//\n\n\t\tconst elements = [];\n\n\t\tconst shader = LensflareElement.Shader;\n\n\t\tconst material2 = new RawShaderMaterial( {\n\t\t\tuniforms: {\n\t\t\t\t'map': { value: null },\n\t\t\t\t'occlusionMap': { value: occlusionMap },\n\t\t\t\t'color': { value: new Color( 0xffffff ) },\n\t\t\t\t'scale': { value: new Vector2() },\n\t\t\t\t'screenPosition': { value: new Vector3() }\n\t\t\t},\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\ttransparent: true,\n\t\t\tdepthWrite: false\n\t\t} );\n\n\t\tconst mesh2 = new Mesh( geometry, material2 );\n\n\t\tthis.addElement = function ( element ) {\n\n\t\t\telements.push( element );\n\n\t\t};\n\n\t\t//\n\n\t\tconst scale = new Vector2();\n\t\tconst screenPositionPixels = new Vector2();\n\t\tconst validArea = new Box2();\n\t\tconst viewport = new Vector4();\n\n\t\tthis.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\trenderer.getCurrentViewport( viewport );\n\n\t\t\tconst invAspect = viewport.w / viewport.z;\n\t\t\tconst halfViewportWidth = viewport.z / 2.0;\n\t\t\tconst halfViewportHeight = viewport.w / 2.0;\n\n\t\t\tlet size = 16 / viewport.w;\n\t\t\tscale.set( size * invAspect, size );\n\n\t\t\tvalidArea.min.set( viewport.x, viewport.y );\n\t\t\tvalidArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );\n\n\t\t\t// calculate position in screen space\n\n\t\t\tpositionView.setFromMatrixPosition( this.matrixWorld );\n\t\t\tpositionView.applyMatrix4( camera.matrixWorldInverse );\n\n\t\t\tif ( positionView.z > 0 ) return; // lensflare is behind the camera\n\n\t\t\tpositionScreen.copy( positionView ).applyMatrix4( camera.projectionMatrix );\n\n\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\tscreenPositionPixels.x = viewport.x + ( positionScreen.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\tscreenPositionPixels.y = viewport.y + ( positionScreen.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t// screen cull\n\n\t\t\tif ( validArea.containsPoint( screenPositionPixels ) ) {\n\n\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\trenderer.copyFramebufferToTexture( screenPositionPixels, tempMap );\n\n\t\t\t\t// render pink quad\n\n\t\t\t\tlet uniforms = material1a.uniforms;\n\t\t\t\tuniforms[ 'scale' ].value = scale;\n\t\t\t\tuniforms[ 'screenPosition' ].value = positionScreen;\n\n\t\t\t\trenderer.renderBufferDirect( camera, null, geometry, material1a, mesh1, null );\n\n\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\trenderer.copyFramebufferToTexture( screenPositionPixels, occlusionMap );\n\n\t\t\t\t// restore graphics\n\n\t\t\t\tuniforms = material1b.uniforms;\n\t\t\t\tuniforms[ 'scale' ].value = scale;\n\t\t\t\tuniforms[ 'screenPosition' ].value = positionScreen;\n\n\t\t\t\trenderer.renderBufferDirect( camera, null, geometry, material1b, mesh1, null );\n\n\t\t\t\t// render elements\n\n\t\t\t\tconst vecX = - positionScreen.x * 2;\n\t\t\t\tconst vecY = - positionScreen.y * 2;\n\n\t\t\t\tfor ( let i = 0, l = elements.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst element = elements[ i ];\n\n\t\t\t\t\tconst uniforms = material2.uniforms;\n\n\t\t\t\t\tuniforms[ 'color' ].value.copy( element.color );\n\t\t\t\t\tuniforms[ 'map' ].value = element.texture;\n\t\t\t\t\tuniforms[ 'screenPosition' ].value.x = positionScreen.x + vecX * element.distance;\n\t\t\t\t\tuniforms[ 'screenPosition' ].value.y = positionScreen.y + vecY * element.distance;\n\n\t\t\t\t\tsize = element.size / viewport.w;\n\t\t\t\t\tconst invAspect = viewport.w / viewport.z;\n\n\t\t\t\t\tuniforms[ 'scale' ].value.set( size * invAspect, size );\n\n\t\t\t\t\tmaterial2.uniformsNeedUpdate = true;\n\n\t\t\t\t\trenderer.renderBufferDirect( camera, null, geometry, material2, mesh2, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.dispose = function () {\n\n\t\t\tmaterial1a.dispose();\n\t\t\tmaterial1b.dispose();\n\t\t\tmaterial2.dispose();\n\n\t\t\ttempMap.dispose();\n\t\t\tocclusionMap.dispose();\n\n\t\t\tfor ( let i = 0, l = elements.length; i < l; i ++ ) {\n\n\t\t\t\telements[ i ].texture.dispose();\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n}\n\nLensflare.prototype.isLensflare = true;\n\n//\n\nclass LensflareElement {\n\n\tconstructor( texture, size = 1, distance = 0, color = new Color( 0xffffff ) ) {\n\n\t\tthis.texture = texture;\n\t\tthis.size = size;\n\t\tthis.distance = distance;\n\t\tthis.color = color;\n\n\t}\n\n}\n\nLensflareElement.Shader = {\n\n\tuniforms: {\n\n\t\t'map': { value: null },\n\t\t'occlusionMap': { value: null },\n\t\t'color': { value: null },\n\t\t'scale': { value: null },\n\t\t'screenPosition': { value: null }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tprecision highp float;\n\n\t\tuniform vec3 screenPosition;\n\t\tuniform vec2 scale;\n\n\t\tuniform sampler2D occlusionMap;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvUV = uv;\n\n\t\t\tvec2 pos = position.xy;\n\n\t\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\n\t\t\tvVisibility =        visibility.r / 9.0;\n\t\t\tvVisibility *= 1.0 - visibility.g / 9.0;\n\t\t\tvVisibility *=       visibility.b / 9.0;\n\n\t\t\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tprecision highp float;\n\n\t\tuniform sampler2D map;\n\t\tuniform vec3 color;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texture = texture2D( map, vUV );\n\t\t\ttexture.a *= vVisibility;\n\t\t\tgl_FragColor = texture;\n\t\t\tgl_FragColor.rgb *= color;\n\n\t\t}`\n\n};\n\nLensflare.Geometry = ( function () {\n\n\tconst geometry = new BufferGeometry();\n\n\tconst float32Array = new Float32Array( [\n\t\t- 1, - 1, 0, 0, 0,\n\t\t1, - 1, 0, 1, 0,\n\t\t1, 1, 0, 1, 1,\n\t\t- 1, 1, 0, 0, 1\n\t] );\n\n\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\tgeometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\tgeometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\tgeometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\treturn geometry;\n\n} )();\n\nexport { Lensflare, LensflareElement };\n","/* jshint esversion: 9 */\n/* For dealing with spline curves */\n/* global THREE, AFRAME */\n\nimport { LensflareElement } from 'three/examples/jsm/objects/Lensflare.js';\nAFRAME.registerComponent('lens-flare', {\n\tschema: {\n\t\ttexture: {\n\t\t\tdocumentation: 'Texture of the lensflare',\n\t\t\tdefault: 'https://threejs.org/examples/textures/lensflare/lensflare0.png',\n\t\t\ttype: 'map'\n\t\t},\n\t\tsize: {\n\t\t\tdocumentation: 'Size in pixels of the lensflare',\n\t\t\ttype: 'map'\n\t\t},\n\t\tdistance: {\n\t\t\tdocumentation: 'Distance from the light 0-1',\n\t\t\tdefault: 0\n\t\t},\n\t\tcolor: {\n\t\t\tdocumentation: 'Override color of the lensflare',\n\t\t\ttype: 'color',\n\t\t\tdefault: 'white'\n\t\t},\n\t},\n\tinit () {\n\t\tthis.lensFlare = new LensflareElement();\n\t\tel.setObject3D('lensflare', this.lensFlare);\n\t},\n\tupdate(oldData={}) {\n\t\tfor (const prop of ['texture', 'size', 'distance', 'color']) {\n\t\t\tconst value = data[prop];\n\t\t\tif (oldData[prop] !== value) {\n\t\t\t\tif (prop === 'texture') {\n\t\t\t\t\tthis.el.sceneEl.systems.material.loadTexture(value, { src: value }, function textureLoaded (texture) {\n\t\t\t\t\t\tthis.lensFlare.texture = texture;\n\t\t\t\t\t\tAFRAME.utils.material.handleTextureEvents(self.el, texture);\n\t\t\t\t\t});\n\t\t\t\t} else if (prop === 'color') {\n\t\t\t\t\tthis.lensFlare.color.set(value);\n\t\t\t\t} else {\n\t\t\t\t\tthis.lensFlare[prop] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tremove() {\n\t\tel.removeObject3D('lensflare');\n\t}\n});\n"],"names":["Lensflare","Mesh","constructor","super","Geometry","MeshBasicMaterial","opacity","transparent","this","type","frustumCulled","renderOrder","Infinity","positionScreen","Vector3","positionView","tempMap","FramebufferTexture","RGBAFormat","occlusionMap","geometry","material1a","RawShaderMaterial","uniforms","scale","value","screenPosition","vertexShader","fragmentShader","depthTest","depthWrite","material1b","map","mesh1","elements","shader","LensflareElement","Shader","material2","color","Color","Vector2","blending","AdditiveBlending","mesh2","addElement","element","push","screenPositionPixels","validArea","Box2","viewport","Vector4","onBeforeRender","renderer","scene","camera","getCurrentViewport","invAspect","w","z","halfViewportWidth","halfViewportHeight","size","set","min","x","y","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderBufferDirect","vecX","vecY","i","l","length","texture","distance","uniformsNeedUpdate","dispose","prototype","isLensflare","BufferGeometry","float32Array","Float32Array","interleavedBuffer","InterleavedBuffer","setIndex","setAttribute","InterleavedBufferAttribute","AFRAME","registerComponent","schema","documentation","default","init","lensFlare","el","setObject3D","update","oldData","prop","data","sceneEl","systems","material","loadTexture","src","utils","handleTextureEvents","self","remove","removeObject3D"],"mappings":"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"}